generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model alerts {
  id               Int            @id @default(autoincrement())
  entryid          Int
  priority         priority_type?
  alertdescription String         @db.VarChar(255)
  alertstatus      alert_status
  alertdate        DateTime       @db.Timestamp(6)
  feed             feed           @relation(fields: [entryid], references: [entryid], onDelete: NoAction, onUpdate: NoAction)
}

model channel {
  id          Int       @id
  name        String    @db.VarChar
  latitude    Float
  longitude   Float
  field1      String?   @db.VarChar(100)
  field2      String?   @db.VarChar(100)
  field3      String?   @db.VarChar(100)
  field4      String?   @db.VarChar(100)
  field5      String?   @db.VarChar(100)
  field6      String?   @db.VarChar(100)
  field7      String?   @db.VarChar(100)
  field8      String?   @db.VarChar(100)
  lastentryid Int
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
  ApiKey      ApiKey[]
  feed        feed[]
}

model feed {
  id        Int      @id @default(autoincrement())
  channelid Int
  entryid   Int      @unique
  createdat DateTime @db.Timestamp(6)
  field1    Float?
  field2    Float?
  field3    Float?
  field4    String?  @db.VarChar(100)
  field5    String?  @db.VarChar(100)
  field6    String?  @db.VarChar(100)
  field7    String?  @db.VarChar(100)
  field8    String?  @db.VarChar(100)
  alerts    alerts[]
  channel   channel  @relation(fields: [channelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model labs {
  id          Int    @id @default(autoincrement())
  lablocation String @db.VarChar(100)
  managerid   Int
  users       users  @relation(fields: [managerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                          Int         @id @default(autoincrement())
  user_role                   role        @default(STANDARD_USER)
  email                       String      @unique @db.VarChar(100)
  password                    String      @db.VarChar(255)
  firstName                   String      @db.VarChar(50)
  lastName                    String      @db.VarChar(50)
  organisation                String?     @db.VarChar(50)
  avatar                      String?     @db.VarChar(255)
  resetToken                  String?     @db.VarChar(255)
  resetTokenExpiry            DateTime?   @db.Timestamp(6)
  created_at                  DateTime?   @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?   @default(now()) @db.Timestamp(6)
  phone_number                String?     @db.VarChar(15)
  address_line_1              String?     @db.VarChar(255)
  address_line_2              String?     @db.VarChar(255)
  city                        String?     @db.VarChar(100)
  county                      String?     @db.VarChar(100)
  postcode                    String?     @db.VarChar(20)
  specialisation              String?     @db.VarChar(255)
  description                 String?     @db.VarChar(255)
  organisation_role           String?     @db.VarChar(50)
  organisation_email          String?     @db.VarChar(100)
  organisation_phone_number   String?     @db.VarChar(15)
  organisation_address_line_1 String?     @db.VarChar(255)
  organisation_address_line_2 String?     @db.VarChar(255)
  organisation_city           String?     @db.VarChar(100)
  organisation_county         String?     @db.VarChar(100)
  organisation_postcode       String?     @db.VarChar(20)
  status                      user_status
  labs                        labs[]
}

model ApiKey {
  id         Int      @id @default(autoincrement())
  channel_id Int?
  api        String   @unique @db.VarChar
  channel    channel? @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum alert_status {
  resolved
  unresolved
}

enum priority_type {
  high
  moderate
  low
}

enum role {
  ADMIN
  SUPER_USER
  STANDARD_USER
  TEMPORARY_USER
}

enum user_status {
  active
  inactive
}
