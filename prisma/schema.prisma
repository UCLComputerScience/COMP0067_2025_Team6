generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model alerts {
  id               Int            @id @default(autoincrement())
  entryid          Int
  priority         priority_type?
  alertdescription String         @db.VarChar(255)
  alertstatus      alert_status
  alertdate        DateTime       @db.Timestamp(6)
  feed             feed           @relation(fields: [entryid], references: [entryid], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRole {
  ADMIN
  SUPER_USER
  STANDARD_USER
  TEMPORARY_USER
}

model channel {
  id          Int       @id
  name        String    @db.VarChar
  latitude    Float
  longitude   Float
  field1      String?   @db.VarChar(100)
  field2      String?   @db.VarChar(100)
  field3      String?   @db.VarChar(100)
  field4      String?   @db.VarChar(100)
  field5      String?   @db.VarChar(100)
  field6      String?   @db.VarChar(100)
  field7      String?   @db.VarChar(100)
  field8      String?   @db.VarChar(100)
  lastentryid Int
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
  feed        feed[]
}

model feed {
  id        Int      @id @default(autoincrement())
  channelid Int
  entryid   Int      @unique
  createdat DateTime @db.Timestamp(6)
  field1    Float?
  field2    Float?
  field3    Float?
  field4    String?  @db.VarChar(100)
  field5    String?  @db.VarChar(100)
  field6    String?  @db.VarChar(100)
  field7    String?  @db.VarChar(100)
  field8    String?  @db.VarChar(100)
  alerts    alerts[]
  channel   channel  @relation(fields: [channelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model labs {
  id          Int    @id @default(autoincrement())
  lablocation String @db.VarChar(100)
  managerid   Int
  users       users  @relation(fields: [managerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                 Int       @id @default(autoincrement())
  user_role          UserRole  @default(STANDARD_USER)
  email              String    @unique @db.VarChar(100)
  password           String    @db.VarChar(255)
  first_name         String    @db.VarChar(50)
  last_name          String    @db.VarChar(50)
  organisation       String?   @db.VarChar(50)
  avatar             String?   @db.VarChar(255)
  reset_token        String?   @db.VarChar(255)
  reset_token_expiry DateTime? @db.Timestamp(6)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
  labs               labs[]
}

enum alert_status {
  resolved
  unresolved
}

enum priority_type {
  high
  moderate
  low
}

model ApiKey {
  id  Int    @id @default(autoincrement())
  channel_id Int 
  api String @unique
}

